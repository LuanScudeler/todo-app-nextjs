import { useStore } from 'lib/appContext'
import { Close, Pencil } from 'lib/icons'
import { uuid } from 'lib/utils/uuid'
import type { NextPage } from 'next'
import Head from 'next/head'
import { useMemo, useState } from 'react'
import { Footer } from '../components/Footer'
import { CreateForm } from './components/CreateForm'
import { EditForm } from './components/EditForm'
import { useCreateMutation, useTodos } from './index-api'
import { CONTAINERS_WIDTH } from './index-const'

const Home: NextPage = () => {
  const [todoTitle, setTodoTitle] = useState<string>('')
  const [todoEditingTitle, setTodoEditingTitle] = useState<string | null>()
  const [mutationError, setMutationError] = useState<string>()
  const [todoEditingId, setTodoEditingId] = useState<string>()

  const { phrases, editTitle } = useStore(({ phrases, editTitle }) => ({
    phrases,
    editTitle,
  }))

  const {
    data: todoItems = [],
    isLoading,
    isError: isFetchError,
    mutate,
  } = useTodos()

  const { mutate: createTodo, error: createTodoError } = useCreateMutation()
  console.log(createTodoError)
  const handleSubmit = async (e: React.SyntheticEvent) => {
    e.preventDefault()

    setTodoTitle('')
    createTodo({ title: todoTitle, _id: uuid() })
  }

  const handleEditSubmit = async (e: React.SyntheticEvent) => {
    e.preventDefault()

    if (!todoEditingTitle) {
      setTodoEditingId('')
      return
    }

    setTodoEditingId('')
    setTodoEditingTitle(null)

    const { error } = await mutate.update({
      title: todoEditingTitle,
      _id: todoEditingId!,
    })

    error
      ? setMutationError(phrases.updateTodoErrorText)
      : setMutationError(undefined)
  }

  const handleDelete = async (id: string) => {
    const { error } = await mutate.delete(id)

    error
      ? setMutationError(phrases.deleteTodoErrorText)
      : setMutationError(undefined)
  }

  const dynamicStyles = useMemo(() => {
    if (todoEditingId) {
      return {
        titleColor: 'text-gray-300',
        svgFill: 'fill-gray-300',
      }
    }

    return {
      titleColor: 'text-inherit',
      svgFill: 'fill-inherit',
    }
  }, [todoEditingId])

  return (
    <div className="px-8">
      <Head>
        <title>{phrases.titleText}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="min-h-screen py-16 flex flex-col items-center :">
        <h1 className="mb-8 text-3xl sm:text-5xl lg:text-6xl ">
          {phrases.titleText}
        </h1>
        <span className="text-red-600">
          {isFetchError && phrases.fetchTodoErrorText}
          {createTodoError?.message}
        </span>
        <span className="text-neutral-900">
          {isLoading && phrases.loadingText}
        </span>
        <CreateForm
          handleSubmit={handleSubmit}
          todoTitle={todoTitle}
          setTodoTitle={setTodoTitle}
        />
        {todoItems.length > 0 && (
          <ul
            className={`shadow-xl border border-gray-200 ${CONTAINERS_WIDTH}`}
          >
            {todoItems.map((todoItem) => (
              <li
                key={todoItem._id}
                className={`flex bg-white p-4 border-b border-gray-200 ${
                  todoItem._id === todoEditingId ? 'highlight-shadow' : ''
                }`}
              >
                {todoItem._id === todoEditingId ? (
                  <EditForm
                    handleEditSubmit={handleEditSubmit}
                    todoEditingTitle={todoEditingTitle}
                    setTodoEditingTitle={setTodoEditingTitle}
                    todoItem={todoItem}
                    setTodoEditingId={setTodoEditingId}
                  />
                ) : (
                  <>
                    <span
                      className={`${dynamicStyles.titleColor} grow break-all`}
                    >
                      {todoItem.title}
                    </span>
                    <button
                      className={`ml-4 mr-1`}
                      type="button"
                      title={phrases.editTodoLabel}
                      aria-label={phrases.editTodoLabel}
                      onClick={() => {
                        editTitle('TEST')
                        setTodoEditingId(todoItem._id)
                      }}
                      disabled={!!todoEditingId}
                    >
                      <Pencil
                        className={`${dynamicStyles.svgFill}`}
                        size={17}
                      />
                    </button>
                    <button
                      className="ml-4 fill"
                      type="button"
                      title={phrases.deleteTodoLabel}
                      aria-label={phrases.deleteTodoLabel}
                      onClick={() => handleDelete(todoItem._id)}
                      disabled={!!todoEditingId}
                    >
                      <Close className={`${dynamicStyles.svgFill}`} size={16} />
                    </button>
                  </>
                )}
              </li>
            ))}
          </ul>
        )}
      </main>
      <Footer />
    </div>
  )
}

export default Home
